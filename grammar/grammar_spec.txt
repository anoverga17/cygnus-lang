
program
    : func_declaration*
    | expr
    ;

func_declaration
    : 'func' rettype funcname '(' parameters ')' scope
    ;

scope
    : '{' let_stmt '}'
    | '{' expr '}'
    ;

let_stmt
    : let_assign expr
    | let_assign let_stmt
    ;

let_assign
    : 'let' rettype varname '=' expr
    ;

expr
    : INT
    | CHAR
    | BOOL
    | -INT
    | !expr
    | expr + expr
    | expr - expr
    | expr * expr
    | expr / expr
    | expr 'and' expr
    | expr 'or' expr
    | expr '<' expr
    | expr '<=' expr
    | expr '>' expr
    | expr '>=' expr
    | expr '==' expr
    | expr '!=' expr
    | '(' expr ')'
    | funcname '(' arguments ')'
    | varname '(' arguments ')'
    | varname
    | parametername
    | parametername '(' arguments ')'
    | 'if' expr scope 'else' scope
    | 'lambda' '(' parameters  ')' scope
    ;

rettype
    : vartype
    ;

vartype
    : 'int'
    | 'char'
    | 'bool'
    | 'func' rettype
    ;


ID:     [a-zA-Z][a-zA-Z0-9_]* ;
INT:    [0] | ([1-9][0-9]*) ;
CHAR:   '\'' . '\'' ;
WS:     [ \t\r\n]+ -> skip;
COMMENT: '//' (~[\r\n])* -> skip;
